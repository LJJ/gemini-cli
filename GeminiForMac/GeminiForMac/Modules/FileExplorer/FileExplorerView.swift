//
//  FileExplorerView.swift
//  GeminiForMac
//
//  Created by LJJ on 2025/7/4.
//  Refactored by LJJ on 2025/7/14.
//

import SwiftUI
import Factory

struct FileExplorerView: View {
    @StateObject private var fileExplorerVM = FileExplorerVM()
    @ObservedObject private var chatService = Container.shared.chatService.resolve()
    
    var body: some View {
        VStack(spacing: 0) {
            // È°∂ÈÉ®Â∑•ÂÖ∑Ê†è
            FileExplorerToolbar(viewModel: fileExplorerVM)
            
            Divider()
            
            // Â∑•‰ΩúÂå∫‰ø°ÊÅØÊòæÁ§∫
            WorkspaceDisplayBar(
                workspacePath: chatService.currentWorkspace,
                currentPath: chatService.currentPath
            )
            Divider()
            
            // ÈÄâÊã©Áä∂ÊÄÅÊòæÁ§∫
            if fileExplorerVM.hasSelection {
                SelectionStatusBar(viewModel: fileExplorerVM)
                Divider()
            }
            
            // ÊêúÁ¥¢Ê°Ü
            SearchBar(searchText: $fileExplorerVM.searchText, onClear: {
                fileExplorerVM.clearSearch()
            })
            
            Divider()
            
            // ÂΩìÂâçË∑ØÂæÑÊòæÁ§∫
            PathDisplayBar(currentPath: fileExplorerVM.currentPath)
            
            Divider()
            
            // Êñá‰ª∂ÂàóË°®
            FileListContent(viewModel: fileExplorerVM)
        }
        .frame(minWidth: 200, maxWidth: 300)
        .background(Color(NSColor.controlBackgroundColor))
    }
}

// MARK: - Subviews

struct FileExplorerToolbar: View {
    @ObservedObject var viewModel: FileExplorerVM
    
    var body: some View {
        HStack(spacing: 8) {
            // ÂêéÈÄÄÊåâÈíÆ
            Button(action: {
                viewModel.goBack()
            }) {
                Image(systemName: "chevron.left")
                    .font(.caption)
                    .padding(.horizontal, 4)
                    .padding(.vertical, 2)
                    .contentShape(.rect)
            }
            .disabled(!viewModel.canGoBack)
            .buttonStyle(.plain)
            
            // ÂâçËøõÊåâÈíÆ
            Button(action: {
                viewModel.goForward()
            }) {
                Image(systemName: "chevron.right")
                    .font(.caption)
                    .padding(.horizontal, 4)
                    .padding(.vertical, 2)
                    .contentShape(.rect)
            }
            .disabled(!viewModel.canGoForward)
            .buttonStyle(.plain)
            
            // Áà∂ÁõÆÂΩïÊåâÈíÆ
            Button(action: {
                viewModel.navigateToParent()
            }) {
                Image(systemName: "arrow.up")
                    .font(.caption)
                    .padding(.horizontal, 4)
                    .padding(.vertical, 2)
                    .contentShape(.rect)
            }
            .buttonStyle(.plain)
            
            Divider()
                .frame(height: 16)
            
            // Âà∑Êñ∞ÊåâÈíÆ
            Button(action: {
                viewModel.refresh()
            }) {
                Image(systemName: "arrow.clockwise")
                    .font(.caption)
                    .padding(.horizontal, 4)
                    .padding(.vertical, 2)
                    .contentShape(.rect)
            }
            .buttonStyle(.plain)
            
            Spacer()
            
            // Ê†áÈ¢ò
            Text("Êñá‰ª∂ÊµèËßàÂô®")
                .font(.caption)
                .fontWeight(.medium)
                .foregroundColor(.secondary)
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 8)
        .background(Color(NSColor.controlBackgroundColor))
    }
}

struct SelectionStatusBar: View {
    @ObservedObject var viewModel: FileExplorerVM
    
    private var statsText: String {
        let stats = viewModel.selectionStats
        print("üìä ÈÄâÊã©ÁªüËÆ°: ÁõÆÂΩï=\(stats.directories), Êñá‰ª∂=\(stats.files), ÊÄªÈÄâÊã©=\(viewModel.selectedFiles.count)")
        
        var components: [String] = []
        if stats.directories > 0 {
            components.append("\(stats.directories) ‰∏™ÁõÆÂΩï")
        }
        if stats.files > 0 {
            components.append("\(stats.files) ‰∏™Êñá‰ª∂")
        }
        
        if components.isEmpty {
            return "\(viewModel.selectedFiles.count) È°π"
        }
        
        return components.joined(separator: "Ôºå")
    }
    
    var body: some View {
        HStack {
            Text("Â∑≤ÈÄâÊã©")
                .font(.caption2)
                .foregroundColor(.blue)
            
            Spacer()
            
            Text(statsText)
                .font(.caption2)
                .foregroundColor(.secondary)
            
            Button("Ê∏ÖÁ©∫") {
                viewModel.clearSelection()
            }
            .buttonStyle(.plain)
            .font(.caption2)
            .foregroundColor(.red)
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 4)
        .background(Color.blue.opacity(0.1))
    }
}

struct SearchBar: View {
    @Binding var searchText: String
    let onClear: () -> Void
    
    var body: some View {
        HStack {
            Image(systemName: "magnifyingglass")
                .font(.caption)
                .foregroundColor(.secondary)
            
            TextField(String(localized: "ÊêúÁ¥¢Êñá‰ª∂..."), text: $searchText)
                .textFieldStyle(.plain)
                .font(.caption)
            
            if !searchText.isEmpty {
                Button(action: onClear) {
                    Image(systemName: "xmark.circle.fill")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .buttonStyle(.plain)
            }
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 6)
        .background(Color(NSColor.controlBackgroundColor))
    }
}

struct PathDisplayBar: View {
    let currentPath: String
    
    var body: some View {
        HStack {
            Text(currentPath)
                .font(.caption2)
                .foregroundColor(.secondary)
                .lineLimit(1)
                .truncationMode(.middle)
            
            Spacer()
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 4)
        .background(Color(NSColor.controlBackgroundColor))
    }
}

struct WorkspaceDisplayBar: View {
    let workspacePath: String
    let currentPath: String
    @ObservedObject private var chatService = Container.shared.chatService.resolve()
    
    private var isInWorkspace: Bool {
        return currentPath.hasPrefix(workspacePath)
    }
    
    private var relativePath: String {
        if isInWorkspace && currentPath != workspacePath {
            let relative = String(currentPath.dropFirst(workspacePath.count))
            return relative.hasPrefix("/") ? String(relative.dropFirst()) : relative
        }
        return ""
    }
    
    var body: some View {
        VStack(spacing: 2) {
            // Â∑•‰ΩúÂå∫Ë∑ØÂæÑ
            HStack {
                Image(systemName: "folder")
                    .font(.caption2)
                    .foregroundColor(.blue)
                
                Text("Â∑•‰ΩúÂå∫:")
                    .font(.caption2)
                    .fontWeight(.medium)
                    .foregroundColor(.blue)
                
                if workspacePath.isEmpty {
                    Text("Êú™ËÆæÁΩÆ")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .italic()
                } else {
                    Text(workspacePath)
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .lineLimit(1)
                        .truncationMode(.middle)
                }
                
                Spacer()
            }
            
            // Áõ∏ÂØπË∑ØÂæÑÔºàÂ¶ÇÊûúÂú®Â∑•‰ΩúÂå∫ÂÜÖÔºâ
            if !relativePath.isEmpty {
                HStack {
                    Image(systemName: "arrow.right")
                        .font(.caption2)
                        .foregroundColor(.green)
                    
                    Text(relativePath)
                        .font(.caption2)
                        .foregroundColor(.green)
                        .lineLimit(1)
                        .truncationMode(.middle)
                    
                    Spacer()
                }
            }
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 4)
        .background(Color.blue.opacity(0.05))
    }
}

struct FileListContent: View {
    @ObservedObject var viewModel: FileExplorerVM
    
    var body: some View {
        if viewModel.isLoading {
            VStack {
                ProgressView()
                    .scaleEffect(0.8)
                Text("Âä†ËΩΩ‰∏≠...")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
        } else if let errorMessage = viewModel.errorMessage {
            VStack(spacing: 8) {
                Image(systemName: "exclamationmark.triangle")
                    .foregroundColor(.orange)
                Text(errorMessage)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                
                Button("ÈáçËØï") {
                    viewModel.refresh()
                }
                .buttonStyle(.plain)
                .font(.caption)
            }
            .padding()
            .frame(maxWidth: .infinity, maxHeight: .infinity)
        } else {
            ScrollView {
                LazyVStack(spacing: 0) {
                    ForEach(viewModel.filteredItems) { item in
                        RecursiveFileItemView(
                            item: item,
                            viewModel: viewModel,
                            level: 0
                        )
                    }
                }
            }
        }
    }
}

// ÈÄíÂΩíÊñá‰ª∂È°πËßÜÂõæ
struct RecursiveFileItemView: View {
    let item: DirectoryItem
    @ObservedObject var viewModel: FileExplorerVM
    let level: Int
    
    var body: some View {
        VStack(spacing: 0) {
            // ÂΩìÂâçÈ°πÁõÆ
            FileItemView(
                item: item,
                isSelected: viewModel.isFileSelected(item),
                isExpanded: viewModel.isFolderExpanded(item),
                level: level
            ) {
                // ÂçïÂáªÂ§ÑÁêÜÔºöÂàáÊç¢ÈÄâÊã©Áä∂ÊÄÅÔºàÂ§öÈÄâÊ®°ÂºèÔºâ
                viewModel.toggleSelection(item)
            } onDoubleTap: {
                // ÂèåÂáªÔºöËøõÂÖ•ÁõÆÂΩïÔºà‰ªÖÂØπÊñá‰ª∂Â§πÔºâ
                if item.isDirectory {
                    viewModel.navigateToDirectory(item)
                }
            } onToggleExpansion: {
                viewModel.toggleFolderExpansion(item)
            }
            
            // Â≠êÈ°πÁõÆÔºàÂ¶ÇÊûúÂ±ïÂºÄ‰∏îÊúâÂ≠êÈ°πÁõÆÔºâ
            if viewModel.isFolderExpanded(item),
               let children = item.children {
                ForEach(filteredChildren(children)) { childItem in
                    RecursiveFileItemView(
                        item: childItem,
                        viewModel: viewModel,
                        level: level + 1
                    )
                }
            }
        }
    }
    
    // ËøáÊª§Â≠êÈ°πÁõÆ
    private func filteredChildren(_ children: [DirectoryItem]) -> [DirectoryItem] {
        if viewModel.searchText.isEmpty {
            return children
        } else {
            return children.filter { item in
                item.name.localizedCaseInsensitiveContains(viewModel.searchText)
            }
        }
    }
}

#Preview {
    FileExplorerView()
}
